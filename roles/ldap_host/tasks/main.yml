---
# tasks file for ldap_host

- name: (ldap_host) Vars files are included
  include_vars: "{{ item }}"
  with_items:
  - "{{ ansible_distribution }}.yml"
  - "{{ ansible_local.host_facts.env }}.yml"

- name: (ldap_host) Required packages are installed and updated
  package:
    name: "{{ item }}"
    state: latest
  with_items: "{{ ldap_host_packages }}"

# If the server is in one of the environments that can't reach ldapprvin01bato (e.g. BLD or DMZ), then we can't have
# that server calling the ldap_entry task. We have to delegate all of this to the CNC server. Luckily, this also means
# that only the CNC server has to have the necessary python packages for the `ldap_*` modules.
- block:

  - name: (ldap_host) Host is entered into LDAP hosts
    ldap_entry:
      server_uri: "ldap://{{ ldap_host_provider_fqdn }}"
      dn: "cn={{ ansible_hostname }},ou=hosts,{{ ldap_host_base_dc }}"
      # Here we're just using the account of the user invoking this. Any user who runs this should be an admin, or else
      # this isn't going to work. I was _going_ to create uid=managehosts,ou=svcaccts,dc=opensource,[...] but then I'd
      # have to create uid=managepeople,ou=svcaccts,dc=opensource,[...] and then anyone who know the
      # group_vars/all/vault.yml password could manage any of the hosts and users. This way, we still keep control in
      # the hands of the club admins when it comes to people and hosts.
      bind_dn: "uid={{ ldap_host_user }},ou=people,{{ ldap_host_base_dc }}"
      bind_pw: "{{ ldap_host_user_passwd }}"
      state: "{{ ldap_host_state }}"
      objectClass:
        - 'top'
        - 'device'
        - 'ipHost'
        - 'ansibleHost'
      attributes:
        iphostnumber: "{{ ansible_default_ipv4.address }}"
        cn: "{{ ansible_hostname }}"

  - name: (ldap_host) ou={{ ansible_local.host_facts.app }},ou=applications,{{ ldap_host_base_dc }} is present
    ldap_entry:
      server_uri: "ldap://{{ ldap_host_provider_fqdn }}"
      dn: "ou={{ ansible_local.host_facts.app }},ou=applications,{{ ldap_host_base_dc }}"
      bind_dn: "uid={{ ldap_host_user }},ou=people,{{ ldap_host_base_dc }}"
      bind_pw: "{{ ldap_host_user_passwd }}"
      state: present
      objectClass:
        - 'top'
        - 'organizationalunit'
      attributes:
        ou: "{{ ansible_local.host_facts.app }}"
    run_once: True

  - name: (ldap_host) cn=hosts,ou={{ ansible_local.host_facts.app }},ou=applications,{{ ldap_host_base_dc }} is present and includes {{ ansible_hostname }}
    ldap_entry:
      server_uri: "ldap://{{ ldap_host_provider_fqdn }}"
      dn: "cn=hosts,ou={{ ansible_local.host_facts.app }},ou=applications,{{ ldap_host_base_dc }}"
      bind_dn: "uid={{ ldap_host_user }},ou=people,{{ ldap_host_base_dc }}"
      bind_pw: "{{ ldap_host_user_passwd }}"
      state: present
      objectClass:
        - 'top'
        - 'groupofnames'
      attributes:
        cn: 'hosts'
        member: "cn={{ ansible_hostname }},ou=hosts,{{ ldap_host_base_dc }}"

  - name: (ldap_host) cn=hosts,ou={{ ansible_local.host_facts.app }},ou=applications,{{ ldap_host_base_dc }} includes {{ ansible_hostname }}
    # We have to have this one, b/c if the cn=hosts already exists, the `member` attribute won't be overwritten or added to the groupofnames
    ldap_attr:
      server_uri: "ldap://{{ ldap_host_provider_fqdn }}"
      dn: "cn=hosts,ou={{ ansible_local.host_facts.app }},ou=applications,{{ ldap_host_base_dc }}"
      bind_dn: "uid={{ ldap_host_user }},ou=people,{{ ldap_host_base_dc }}"
      bind_pw: "{{ ldap_host_user_passwd }}"
      name: member
      values: "cn={{ ansible_hostname }},ou=hosts,{{ ldap_host_base_dc }}"
      state: "{{ ldap_host_state }}"

  delegate_to: localhost
  connection: local
  become: no

- name: (ldap_host) Templates are deployed
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ ldap_host_files }}"
  notify:
    - (ldap_host) Restart sssd
    - (ldap_host) Restart oddjobd

- name: (ldap_host) LDAP certs directory is present
  file:
    path: "{{ ldap_host_ldap_directory.path }}/certs"
    state: directory
    owner: "{{ ldap_host_ldap_directory.owner }}"
    group: "{{ ldap_host_ldap_directory.group }}"
  notify:
    - (ldap_host) Restart sssd
    - (ldap_host) Restart oddjobd

- name: (ldap_host) cacert.pem is deployed
  copy:
    src: "cacert.pem"
    dest: "{{ ldap_host_ldap_directory.path }}/certs/cacert.pem"
    owner: "{{ ldap_host_ldap_directory.owner }}"
    group: "{{ ldap_host_ldap_directory.group }}"
    mode: 0644
  notify:
    - (ldap_host) Restart sssd
    - (ldap_host) Restart oddjobd

- name: (ldap_host) SSSD is enabled for system authentication on Fedora
  command: authconfig --update --enablesssd --enablesssdauth --enablemkhomedir --updateall
  when: ansible_distribution in ['Fedora']

- name: (ldap_host) SUDOers is configured for SSSD
  lineinfile:
    path: '/etc/nsswitch.conf'
    regexp: '^sudoers:'
    line: 'sudoers: files sss'
